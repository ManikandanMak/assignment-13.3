1) HFile                   :
                           > Data is stored in a HFile which contains sorted key/values.
                           > When the MemStore accumulates enough data, the entire sorted KeyValue set is written to a new HFile in HDFS.
                           > This is a sequential write. It is very fast, as it avoids moving the disk drive head.
                           > A HFile contains a multi-layered index which allows HBase to seek the data without having to read the whole file.

2) HRegion Server          :
                           > HBase Tables are divided horizontally by row key range into “Regions.”
                           > A region contains all rows in the table between the region’s start key and end key
                           > Regions are assigned to the nodes in the cluster, called “Region Servers” and these serve data for reads and writes.
                           > Components of region server are WAL, BlockCache, MemStore, Hfiles.
3) HBase Meta Table        : 
                           > This META table is an HBase table that keeps a list of all regions in the system
                           > The META table is like a b tree.
                           > Structure of Meta Table is as follows:
                                    > Key : region start key, region id
                                    > Values : RegionServer

4) Zookeeper               :
                           > HBase uses ZooKeeper as a distributed coordination service to maintain server state in the cluster.
                           > Zookeeper maintains which servers are alive and available, and provides server failure notification.
                           > Zookeeper uses consensus to guarantee common shared state.
                           > Note that there should be three or five machines for consensus.

5) Read and Write in Hbase :
                           > When the client issues a Put request, the first step is to write the data to the write-ahead log, the WAL:
                           > Edits are appended to the end of the WAL file that is stored on disk.
                           > The WAL is used to recover not-yet-persisted data in case a server crashes
                           > Once the data is written to the WAL, it is placed in the MemStore. Then, the put request acknowledgement returns to the client.
